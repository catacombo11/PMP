/**************************************
  KREQ — KARMA REQUIREMENT ANALYZER (Column K)
  Minim total karma pentru un USER LIVE cu post SURVIVOR (≥3h),
  scanând EXACT 200 postări de la prima ≥3h.

  Robust:
   • Scriere imediată pe rând doar când avem rezultat.
   • Time-budget: cedează înainte de limită și reia același rând.
   • Listing pipeline: oauth → api → old → www (+over18), cu fallback real.
   • /user/.../about: cache + retry/backoff + chunk mic.
   • Diagnoze clare: ok / too hot / pagelimit / forbidden / notfound / quarantined / ratelimited.
   • Watchdog, resume sigur, toleră 3k+ rânduri.
**************************************/

/******** CONFIG ********/
const KREQ_CLIENT_ID      = 'EqV_ifon5S_P2cs6mN7-Kw';
const KREQ_CLIENT_SECRET  = 'h7aq_eNM7_LT1AM5Ihrb9ds4u5BcOQ';
const KREQ_UA             = 'gsheets-karma-req/v12';
const KREQ_START_ROW      = 2;

// Scan window
const KREQ_SCAN_COUNT     = 200;
const KREQ_MIN_AGE_SEC    = 3*3600;
const KREQ_PAGE_LIMIT     = 18;

// Batch + pacing
const KREQ_BATCH_SIZE     = 90;                    // mic pentru a garanta yield
const KREQ_MAX_EXEC_MS    = 5*60*1000 - 20000;     // buffer mare
const KREQ_SLEEP_MS       = 110;
const KREQ_PAGE_SLEEP_MS  = 70;
const KREQ_CHUNK_SLEEP_MS = 140;

// /user/.../about
const KREQ_AUTHOR_CHUNK   = 10;
const KREQ_USER_CACHE_TTL = 6*3600;

// Coloane (A=1)
const KREQ_COL = { SUB:1, KARMA:11 };

// Excluderi
const KREQ_EXCLUDE_USERS = /^(automoderator|\[deleted\])$/i;
const KREQ_BOT_SUFFIX    = /bot$/i;

/******** State keys ********/
const KREQ_PROP = {
  rows:      'kreq_rows',
  idx:       'kreq_idx',
  total:     'kreq_total',
  halt:      'kreq_halt',
  mode:      'kreq_mode',
  sheetName: 'kreq_sheet'
};
const KREQ_TOKEN_KEY   = 'kreq_token';
const KREQ_USER_PREFIX = 'kreq_user_';
const KREQ_LAST_ERR    = 'kreq_last_err'; // diag minimal

/******** MENU ********/
function kreq_onOpen(){
  SpreadsheetApp.getUi().createMenu('Karma Tools (K)')
    .addItem('Start (ALL rows)',    'kreq_startAll')
    .addItem('Start (BLANKS only)', 'kreq_startBlanks')
    .addItem('Status',              'kreq_status')
    .addItem('Stop',                'kreq_stop')
    .addItem('Reset progress',      'kreq_reset')
    .addToUi();
}
function kreq_startAll(){  kreq__kick_('all');  }
function kreq_startBlanks(){kreq__kick_('blanks');}
function kreq__kick_(mode){
  const p = PropertiesService.getDocumentProperties();
  kreq_reset_();
  p.setProperty(KREQ_PROP.mode, mode);
  p.setProperty(KREQ_PROP.sheetName, SpreadsheetApp.getActiveSheet().getSheetName());
  kreq_ensureTrig_();
  kreq_runBatch_();
}
function kreq_status(){
  const p = PropertiesService.getDocumentProperties();
  const msg = 'Karma '+(+(p.getProperty(KREQ_PROP.idx)||0))+'/'+(+(p.getProperty(KREQ_PROP.total)||0))+
              (p.getProperty(KREQ_LAST_ERR)?(' | last: '+p.getProperty(KREQ_LAST_ERR)):'');
  kreq_toast_(msg,5);
}
function kreq_stop(){ PropertiesService.getDocumentProperties().setProperty(KREQ_PROP.halt,'1'); kreq_delTrig_(); kreq_toast_('Karma: stop requested',3); }
function kreq_reset(){ kreq_reset_(); kreq_toast_('Karma: state reset',3); }
function kreq_reset_(){
  const p = PropertiesService.getDocumentProperties();
  [KREQ_PROP.rows,KREQ_PROP.idx,KREQ_PROP.total,KREQ_PROP.halt,KREQ_PROP.mode,KREQ_PROP.sheetName,KREQ_LAST_ERR].forEach(function(k){p.deleteProperty(k);});
}

/******** CORE (row-by-row; watchdog + time-budget) ********/
function kreq_runBatch_(){
  const lock = LockService.getDocumentLock();
  if(!lock.tryLock(0)) return;
  try{
    kreq_ensureTrig_(); // watchdog
    const p  = PropertiesService.getDocumentProperties();
    if (p.getProperty(KREQ_PROP.halt)==='1'){ kreq_delTrig_(); return; }

    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sh = (p.getProperty(KREQ_PROP.sheetName) && ss.getSheetByName(p.getProperty(KREQ_PROP.sheetName))) || ss.getActiveSheet();
    const last = sh.getLastRow(); if(last < KREQ_START_ROW) return;

    if(!p.getProperty(KREQ_PROP.rows)){
      const mode = p.getProperty(KREQ_PROP.mode)||'blanks';
      const rows = kreq_buildRows_(sh, last, mode);
      p.setProperty(KREQ_PROP.rows, JSON.stringify(rows));
      p.setProperty(KREQ_PROP.idx,'0');
      p.setProperty(KREQ_PROP.total,String(rows.length));
      if(!rows.length){ kreq_toast_('Karma: nothing to process ('+(mode)+')',3); kreq_delTrig_(); return; }
    }

    const start = Date.now(), deadline = start + KREQ_MAX_EXEC_MS;
    const rows = JSON.parse(p.getProperty(KREQ_PROP.rows)||'[]');
    var idx = +(p.getProperty(KREQ_PROP.idx)||0);
    const end = Math.min(idx + KREQ_BATCH_SIZE, rows.length);

    for(var k=idx; k<end; k++){
      if (p.getProperty(KREQ_PROP.halt)==='1'){ kreq_delTrig_(); return; }
      if(Date.now()>deadline){ kreq_toast_('Karma: yield at '+k+'/'+rows.length,3); return; }

      const r = rows[k];
      var value = null, note = null;
      try{
        const sub = String(sh.getRange(r, KREQ_COL.SUB).getValue()||'').replace(/^r\//,'').trim();
        if(!sub){
          value = 'N/A'; note = 'empty subreddit cell';
        }else{
          const res = kreq_calcKarmaForSub_(sub, deadline);
          value = res.value; note = res.note||'';
        }
      }catch(err){
        const em = String((err && err.message)||err);
        PropertiesService.getDocumentProperties().setProperty(KREQ_LAST_ERR, em.slice(0,80));
        if(em.indexOf('TIME_BUDGET')>=0){
          // nu scriem nimic, nu incrementăm indexul
          return;
        }
        value = 'N/A'; note = ('fatal skipped: '+em).slice(0,240);
      }

      // scriem doar dacă avem value definit
      if(value!==null){
        sh.getRange(r, KREQ_COL.KARMA).setValue(value);
        sh.getRange(r, KREQ_COL.KARMA).setNote(note||'');
        PropertiesService.getDocumentProperties().setProperty(KREQ_PROP.idx, String(k+1));
      }

      Utilities.sleep(KREQ_SLEEP_MS);
      if(Date.now()>deadline){ kreq_toast_('Karma: yield at '+(k+1)+'/'+rows.length,3); return; }
    }

    PropertiesService.getDocumentProperties().setProperty(KREQ_PROP.idx, String(end));
    kreq_toast_('Karma '+end+'/'+rows.length,5);

    if(end>=rows.length){
      [KREQ_PROP.rows,KREQ_PROP.idx,KREQ_PROP.total,KREQ_PROP.mode,KREQ_LAST_ERR].forEach(function(k){ PropertiesService.getDocumentProperties().deleteProperty(k); });
      kreq_delTrig_(); kreq_toast_('Karma: done',3);
    }
  } finally { lock.releaseLock(); }
}

/******** Row selection ********/
function kreq_buildRows_(sh, last, mode){
  const A = sh.getRange(KREQ_START_ROW, KREQ_COL.SUB,   last-KREQ_START_ROW+1, 1).getValues().flat();
  const K = sh.getRange(KREQ_START_ROW, KREQ_COL.KARMA, last-KREQ_START_ROW+1, 1).getValues().flat();
  const rows = [];
  for(var i=0;i<A.length;i++){
    const sub = String(A[i]||'').trim(); if(!sub) continue;
    const cur = String(K[i]||'').trim();
    if(mode==='all' || !cur) rows.push(KREQ_START_ROW+i);
  }
  return rows;
}

/******** Per-sub computation ********/
function kreq_calcKarmaForSub_(sub, deadline){
  if(Date.now()>deadline) throw new Error('TIME_BUDGET');
  const now = Math.floor(Date.now()/1000);
  const cutoff = now - KREQ_MIN_AGE_SEC;

  const listing = kreq_fetchListingUntil_(sub, cutoff, deadline);
  if(listing.status!=='ok'){
    const text = listing.status==='hot'          ? 'too hot (<3h only)'
               : listing.status==='pagelimit'    ? 'hit page limit (<3h only)'
               : listing.status==='forbidden'    ? 'private/restricted'
               : listing.status==='notfound'     ? 'not found'
               : listing.status==='quarantined'  ? 'quarantined'
               : listing.status==='ratelimited'  ? 'rate limited (retry later)'
               : 'listing fetch failed';
    return { value:'N/A', note: text + ' (pages:'+(listing.pages||0)+' code:'+(listing.code||'-')+')' };
  }

  const posts = listing.posts, firstIdxGte3h = listing.firstIdxGte3h;
  if(firstIdxGte3h < 0) return { value:'N/A', note:'no post ≥3h found' };

  const endIdx = Math.min(posts.length, firstIdxGte3h + KREQ_SCAN_COUNT);
  const slice  = posts.slice(firstIdxGte3h, endIdx);
  if(!slice.length) return { value:'N/A', note:'no eligible window' };

  const livePosts = slice.filter(function(p){
    if(!p || !p.author) return false;
    if(KREQ_EXCLUDE_USERS.test(p.author) || KREQ_BOT_SUFFIX.test(p.author)) return false;
    if(p.stickied) return false;
    if(kreq_removed_(p)) return false;
    const t = +p.created_utc || 0;
    if(!t || t > cutoff) return false;
    return true;
  });
  if(!livePosts.length){
    const info = 'window:'+slice.length+(slice.length<KREQ_SCAN_COUNT?'/<'+KREQ_SCAN_COUNT:'');
    return { value:'N/A', note:'no surviving posts ('+info+')' };
  }

  if(Date.now()>deadline) throw new Error('TIME_BUDGET');

  const authors = Array.from(new Set(livePosts.map(function(p){return p.author;})));
  const infoMap = kreq_fetchUsersInfo_(authors, deadline);

  var best = { total: Infinity, link:0, comment:0, ageDays:0, user:null };
  for(var ai=0; ai<authors.length; ai++){
    if(Date.now()>deadline) throw new Error('TIME_BUDGET');
    const u = authors[ai];
    const info = infoMap[u];
    if(!info || !info.live) continue;
    const link    = +info.link_karma || 0;
    const comment = +info.comment_karma || 0;
    const total   = isFinite(+info.total_karma) ? +info.total_karma : (link+comment);
    const ageDays = info.created_utc ? Math.max(0,(now - info.created_utc)/86400) : 0;
    if(total < best.total) best = { total: total, link: link, comment: comment, ageDays: ageDays, user: u };
  }

  if(!isFinite(best.total) || best.total===Infinity){
    return { value:'N/A', note:'no live user info (sample:'+slice.length+')' };
  }

  const note = best.link+'|'+best.comment+' | age:'+best.ageDays.toFixed(1)+'d ('+best.user+')' +
               (slice.length<KREQ_SCAN_COUNT ? ' | sample:'+slice.length : '');
  return { value: best.total, note: note };
}

/******** Listing fetch: OAuth → api → old → www (+over18), cu fallback + time-budget ********/
function kreq_fetchListingUntil_(sub, cutoff, deadline){
  const posts = [];
  var after = null, pages = 0, firstIdxGte3h = -1;
  var firstCode = 0, firstStatus = 'ok';

  while(pages < KREQ_PAGE_LIMIT){
    if(Date.now()>deadline) throw new Error('TIME_BUDGET');

    const page = kreq_fetchListingPage_(sub, after);
    if(!page || !page.ok){
      if(pages===0){ firstStatus = (page && page.status) || 'failed'; firstCode = (page && page.code) || 0; }
      break;
    }
    if(pages===0) firstCode = page.code;

    const batch = (page.json && page.json.data && page.json.data.children || []).map(function(x){return x.data;}).filter(function(d){ return d && typeof d.created_utc==='number'; });
    if(!batch.length){ if(!after && pages===0) firstStatus='failed'; break; }

    const oldLen = posts.length;
    Array.prototype.push.apply(posts, batch);
    after = page.json.data.after || null;
    pages++;

    if(firstIdxGte3h === -1){
      for(var i=oldLen; i<posts.length; i++){
        const t = +posts[i].created_utc || 0;
        if(t && t <= cutoff){ firstIdxGte3h = i; break; }
      }
    }
    if(firstIdxGte3h !== -1 && (posts.length - firstIdxGte3h) >= KREQ_SCAN_COUNT) break;

    if(!after){
      if(firstIdxGte3h === -1) firstStatus = 'hot';
      break;
    }
    Utilities.sleep(KREQ_PAGE_SLEEP_MS);
  }

  if(firstIdxGte3h === -1 && pages >= KREQ_PAGE_LIMIT) firstStatus = 'pagelimit';

  if(firstStatus!=='ok' && posts.length===0){
    return { status:firstStatus, code:firstCode, pages:pages };
  }
  return { status:firstStatus==='ok'?'ok':firstStatus, posts:posts, firstIdxGte3h:firstIdxGte3h, pages:pages, code:firstCode };
}

function kreq_fetchListingPage_(sub, after){
  const q = 'limit=100' + (after?('&after='+encodeURIComponent(after)):'') + '&restrict_sr=on&raw_json=1&sr_detail=0';
  const paths = [
    {type:'oauth', url:'https://oauth.reddit.com/r/'+encodeURIComponent(sub)+'/new?'+q, hdr:hdrOAuth_()},
    {type:'api',   url:'https://api.reddit.com/r/'+encodeURIComponent(sub)+'/new?'+q,   hdr:hdrAnon_()},
    {type:'old',   url:'https://old.reddit.com/r/'+encodeURIComponent(sub)+'/new.json?'+q, hdr:hdrAnon_()},
    {type:'www',   url:'https://www.reddit.com/r/'+encodeURIComponent(sub)+'/new.json?'+q, hdr:hdrAnon_()}
  ];

  var lastCode = 0, seenCodes = {};
  for(var i=0;i<paths.length;i++){
    const p = paths[i];
    const r = kreq_fetchJSONWithCode_(p.url, p.hdr);
    if(r.ok) return r;
    lastCode = r.code || 0;
    if(lastCode) seenCodes[lastCode] = true;
  }

  if(seenCodes[403]) return { ok:false, status:'forbidden',   code:403 };
  if(seenCodes[451]) return { ok:false, status:'quarantined', code:451 };
  if(seenCodes[404]) return { ok:false, status:'notfound',    code:404 };
  if(seenCodes[429]) return { ok:false, status:'ratelimited', code:429 };
  return { ok:false, status:'failed', code:lastCode||0 };
}

function hdrAnon_(){
  return {
    'User-Agent': KREQ_UA,
    'Cookie': 'over18=1',
    'Accept':'application/json',
    'Accept-Language':'en-US,en;q=0.9'
  };
}
function hdrOAuth_(){
  return {
    'Authorization':'Bearer '+kreq_getToken_(),
    'User-Agent': KREQ_UA,
    'Accept':'application/json',
    'Accept-Language':'en-US,en;q=0.9'
  };
}

function kreq_fetchJSONWithCode_(url, headers){
  var wait = 220;
  for(var a=0;a<5;a++){
    try{
      const r = UrlFetchApp.fetch(url,{headers:headers, muteHttpExceptions:true, followRedirects:true});
      const code = r.getResponseCode();
      if(code===200){
        const txt = r.getContentText();
        try{ return { ok:true, code:code, json: JSON.parse(txt) }; }
        catch(e){ return { ok:false, code:0 }; }
      }
      if(code===401 && headers.Authorization) kreq_invalidateToken_();
      if(code===429 || code>=500){ Utilities.sleep(wait); wait = Math.min(3000, wait*2); continue; }
      return { ok:false, code:code };
    }catch(e){}
    Utilities.sleep(wait); wait = Math.min(3000, wait*2);
  }
  return { ok:false, code:0 };
}

/******** Users info (cache + retry/backoff + time-budget) ********/
function kreq_fetchUsersInfo_(users, deadline){
  const cache = CacheService.getScriptCache();
  const out = {}, toFetch = [];

  for(var i=0;i<users.length;i++){
    if(Date.now()>deadline) throw new Error('TIME_BUDGET');
    const u = users[i];
    const key = KREQ_USER_PREFIX + u.toLowerCase();
    const hit = cache.get(key);
    if(hit){ try{ out[u] = JSON.parse(hit); }catch(e){} } else toFetch.push(u);
  }
  if(!toFetch.length) return out;

  for(var i0=0;i0<toFetch.length;i0+=KREQ_AUTHOR_CHUNK){
    if(Date.now()>deadline) throw new Error('TIME_BUDGET');
    const chunk = toFetch.slice(i0, i0+KREQ_AUTHOR_CHUNK);
    var infos = new Array(chunk.length).fill(null);

    var retries = 0;
    while(retries < 2){
      const token = kreq_getToken_();
      const res1 = UrlFetchApp.fetchAll(chunk.map(function(u){ return {
        url:'https://oauth.reddit.com/user/'+encodeURIComponent(u)+'/about',
        headers:{'Authorization':'Bearer '+token,'User-Agent':KREQ_UA,'Accept':'application/json'},
        muteHttpExceptions:true, followRedirects:true
      };}));

      var needRetryAny = false;
      for(var j=0;j<res1.length;j++){
        try{
          const code = res1[j].getResponseCode();
          if(code===200){
            const data = JSON.parse(res1[j].getContentText()).data||{};
            infos[j] = kreq_userInfoFromAbout_(data);
          }else if(code===404){
            infos[j] = { live:false };
          }else if(code===429 || code>=500){
            needRetryAny = true;
          }
        }catch(e){ needRetryAny = true; }
      }
      if(!needRetryAny) break;
      Utilities.sleep(500*(retries+1)); retries++;
      if(Date.now()>deadline) throw new Error('TIME_BUDGET');
    }

    const res2 = UrlFetchApp.fetchAll(chunk.map(function(u){ return {
      url:'https://api.reddit.com/user/'+encodeURIComponent(u)+'/about?raw_json=1',
      headers:{'User-Agent':KREQ_UA,'Cookie':'over18=1','Accept':'application/json'},
      muteHttpExceptions:true, followRedirects:true
    };}));
    for(var j=0;j<res2.length;j++){
      if(infos[j]) continue;
      try{
        const code = res2[j].getResponseCode();
        if(code===200){
          const data = JSON.parse(res2[j].getContentText()).data||{};
          infos[j] = kreq_userInfoFromAbout_(data);
        }else{
          infos[j] = { live:false };
        }
      }catch(e){ infos[j] = { live:false }; }
    }

    for(var j=0;j<chunk.length;j++){
      const u = chunk[j];
      const info = infos[j] || { live:false };
      out[u] = info;
      cache.put(KREQ_USER_PREFIX+u.toLowerCase(), JSON.stringify(info), KREQ_USER_CACHE_TTL);
    }
    Utilities.sleep(KREQ_CHUNK_SLEEP_MS);
  }
  return out;
}

function kreq_userInfoFromAbout_(data){
  const suspended = !!(data.is_suspended || data.suspension_expiration_utc);
  const nameOk   = typeof data.name === 'string' && data.name.length>0;
  return {
    live:          !!(nameOk && !suspended),
    total_karma:   data.total_karma,
    link_karma:    data.link_karma,
    comment_karma: data.comment_karma,
    created_utc:   data.created_utc
  };
}

/******** Helpers ********/
function kreq_removed_(p){
  if(p.removed_by_category) return true;
  if(p.banned_by) return true;
  if(p.removal_reason) return true;
  if(p.mod_reason_title) return true;
  if(p.mod_removed) return true;
  if(p.author_removed) return true;
  return false;
}

/******** OAuth ********/
function kreq_getToken_(){
  const cache = CacheService.getScriptCache();
  const hit = cache.get(KREQ_TOKEN_KEY);
  if(hit) return hit;

  const resp = UrlFetchApp.fetch('https://www.reddit.com/api/v1/access_token',{
    method:'post',
    payload:{grant_type:'client_credentials'},
    headers:{'Authorization':'Basic '+Utilities.base64Encode(KREQ_CLIENT_ID+':'+KREQ_CLIENT_SECRET),'User-Agent':KREQ_UA,'Accept':'application/json'},
    muteHttpExceptions:true
  });
  const code = resp.getResponseCode();
  if(code!==200) throw new Error('OAuth failed '+code);
  const data = JSON.parse(resp.getContentText());
  const token = data.access_token;
  cache.put(KREQ_TOKEN_KEY, token, Math.max(60,(data.expires_in||3600)-120));
  return token;
}
function kreq_invalidateToken_(){ CacheService.getScriptCache().remove(KREQ_TOKEN_KEY); }

/******** Triggers + toast (watchdog) ********/
function kreq_ensureTrig_(){
  const exists = ScriptApp.getProjectTriggers().some(function(t){return t.getHandlerFunction()==='kreq_runBatch_';});
  if(!exists) ScriptApp.newTrigger('kreq_runBatch_').timeBased().everyMinutes(1).create();
}
function kreq_delTrig_(){ ScriptApp.getProjectTriggers().forEach(function(t){ if(t.getHandlerFunction()==='kreq_runBatch_') ScriptApp.deleteTrigger(t); }); }
function kreq_toast_(m,s){ SpreadsheetApp.getActive().toast(m,'KARMA REQ',s); }

/******** Maintenance (optional) ********/
function kreq_killAllTriggersOnce(){ ScriptApp.getProjectTriggers().forEach(ScriptApp.deleteTrigger); }
